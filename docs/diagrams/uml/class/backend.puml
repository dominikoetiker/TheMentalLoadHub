@startuml
left to right direction
skinparam {
    linetype ortho
    packageStyle rectangle
}

'--------------------------------
' Models
'--------------------------------
package "Models" {
    '--------------------------------
    ' Household
    '--------------------------------
    Class Household {
        ' attributes --------------------------
        + id: int {readOnly}
        + name: str
        + created_at: datetime.datetime {readOnly}
        + updated_at: datetime.datetime {readOnly}
        ' methods --------------------------
        + create(name: str): Household
        + delete(): None
        + read_members(): List[User]
    }

    '--------------------------------
    ' User Domain
    '--------------------------------
    package "User Domain" {
        Class User {
            ' attributes --------------------------
            + id: int {readOnly}
            + household: Household {readOnly}
            + household_role: HouseholdRole
            - __email: str {readOnly}
            + username: str
            - __hashed_password: str
            + is_active: bool
            + created_at: datetime.datetime {readOnly}
            + updated_at: datetime.datetime {readOnly}
            ' methods --------------------------
            + create(household: Household, email: str, username: str, plain_password: str): User
            + read_email(): str
            + update_username(new_username: str): None
            + update_email(new_email: str): None
            - __validate_email(email: str): bool
            + delete(): None
            + reset_password(): None
            + login(password: str): bool
            + update_password(new_plain_password: str): None
            + verify_password(plain_password: str): bool
            + logout(): None
        }
        Class HouseholdRole {
            ' attributes --------------------------
            + id: int {readOnly}
            + name: str {readOnly}
        }

        ' Relations inside Domain
        User "0..*" -- "1" HouseholdRole : "assignee"
    }

    '--------------------------------
    ' AreaOfResponsibility
    '--------------------------------
    Class AreaOfResponsibility {
        ' attributes --------------------------
        + id: int {readOnly}
        + household: Household {readOnly}
        + assigned_to: User
        + title: str
        + description: str
        + created_at: datetime.datetime {readOnly}
        + updated_at: datetime.datetime {readOnly}
        ' methods --------------------------
        + create(household: Household, title: str, description: str): AreaOfResponsibility
        + delete(): None
    }

    '--------------------------------
    ' Project Domain
    '--------------------------------
    package "Project Domain" {
        Class Project {
            ' attributes --------------------------
            + id: int {readOnly}
            + created_by: User {readOnly}
            + area_of_responsibility: AreaOfResponsibility
            + title: str
            + description: str
            + deadline: datetime.date
            + is_done: bool
            + created_at: datetime.datetime {readOnly}
            + updated_at: datetime.datetime {readOnly}
            + done_at: datetime.datetime {readOnly}
            ' methods --------------------------
            + create(created_by: User, title: str, description: str): Project
            + delete(): None
            + read_goals(): List[Goal]
            + read_users(): List[User_Project]
            + read_tasks(): List[Task]
            + read_custom_lists(): List[CustomList]
            + read_shopping_lists(): List[ShoppingList]
        }
        Class ProjectGoal {
            ' attributes --------------------------
            + id: int {readOnly}
            + project: Project
            + title: str
            + description: str
            ' methods --------------------------
            + create(title: str, description: str): ProjectGoal
            + delete()
        }
        Class ProjectRole {
            ' attributes --------------------------
            + id: int {readOnly}
            + name: str {readOnly}
        }
        Class User_Project {
            ' attributes --------------------------
            + id: int {readOnly}
            + user: User
            + project: Project
            + role: ProjectRole
            ' methods --------------------------
            + create(user: User, project: Project, project_role: ProjectRole): User_Project
            + delete(): None
        }

        ' Relations inside Domain
        Project "1" *-- "0..*" ProjectGoal : "has"
        User_Project "0..*" -- "1" Project : "involved in"
        User_Project "0..*" -- "1" ProjectRole : "involved as"
    }


    '--------------------------------
    ' CustomList Domain
    '--------------------------------
    package "CustomList Domain" {
        Class CustomList {
            ' attributes --------------------------
            + id: int {readOnly}
            + created_by: User {readOnly}
            + area_of_responsibility: AreaOfResponsibility
            + project: Project
            + title: str
            + description: str
            + is_checklist: bool
            + is_active: bool
            + created_at: datetime.datetime {readOnly}
            + updated_at: datetime.datetime {readOnly}
            ' methods --------------------------
            + create(created_by: User, title: str, description: str): CustomList
            + read_items(): List[CustomList_CustomListItem]
            + delete(): None

        }
        Class CustomListItem {
            ' attributes --------------------------
            + id: int {readOnly}
            + household: Household {readOnly}
            + name: str
            ' methods --------------------------
            + create(household: Household, name: str): CustomListItem
            + delete(): None
        }
        Class CustomList_CustomListItem {
            ' attributes --------------------------
            + id: int {readOnly}
            + list: CustomList
            + item: CustomListItem
            + parent: CustomList_CustomListItem
            + quantity: float
            + unit: str
            + note: str
            + is_done: bool
            ' methods --------------------------
            + create(list: CustomList, item: CustomListItem, quantity: float, unit: str, parent: CustomListItem): CustomList_CustomListItem
            + delete(): None
        }

        ' Relations inside Domain
        CustomList "1" *-- "0..*" CustomList_CustomListItem : "consists of"
        CustomList_CustomListItem "0..*" -- "1" CustomListItem : "has a"
        CustomList_CustomListItem "0..*" -- "0..1" CustomList_CustomListItem : "is child of"
    }

    '--------------------------------
    ' Task Domain
    '--------------------------------
    package "Task Domain" {
        Class Task {
            ' attributes --------------------------
            + id: int {readOnly}
            + area_of_responsibility: AreaOfResponsibility
            + created_by: User {readOnly}
            + assigned_to: User
            + priority: Priority
            + status: Status
            + is_recurring: bool
            + title: str
            + description: str
            + created_at: datetime.datetime {readOnly}
            + updated_at: datetime.datetime {readOnly}
            + done_at: datetime.datetime {readOnly}
            ' methods --------------------------
            + create(created_by: User, title: str, is_recurring: bool, description: str): Task
            + delete(): None
        }
        Class Priority {
            + id: int {readOnly}
            + name: str {readOnly}
        }
        Class Status {
            + id: int {readOnly}
            + name: str {readOnly}
        }
        Class Task_TaskHelper {
            ' attributes --------------------------
            + id: int {readOnly}
            + user: User
            + task: Task
            ' methods --------------------------
            + create(user: User, task: Task): Task_TaskHelper
            + delete(): None
        }
        Class RecurrenceCycle {
            + id: int {readOnly}
            + name: str {readOnly}
        }
        Class RecurringTask {
            ' attributes --------------------------
            + recurrence_cycle: RecurrenceCycle
            + recurrence_interval: int
            + next_reset_at: datetime.datetime
            + is_active: bool
            ' methods --------------------------
            + create(created_by: User, title: str, description: str): RecurringTask
            + delete(): None
        }
        Class NonRecurringTask {
            ' attributes --------------------------
            + project: Project
            + deadline: datetime.datetime
            ' methods --------------------------
            + create(created_by: User, title: str, description: str): NonRecurringTask
            + delete(): None
        }

        ' Relations inside Domain
        Task "0..*" -- "1" Priority : "has a"
        Task "0..*" -- "1" Status : "has a"
        Task_TaskHelper "0..*" -- "1" Task : "helps"

        RecurringTask  "0..*" - "1" RecurrenceCycle : "has"

        ' Inheritance NonRecurring- and Recurring Tasks from Task
        NonRecurringTask "0..1"--|> "1" Task : "is a" <<shared_id>>
        RecurringTask "0..1" --|> "1" Task : "is a" <<shared_id>>
    }

    '--------------------------------
    ' ShoppingList Domain
    '--------------------------------
    package "ShoppingList Domain" {
        Class ShoppingList {
            ' attributes --------------------------
            + id: int {readOnly}
            + created_by: User {readOnly}
            + project: Project
            + area_of_responsibility: AreaOfResponsibility
            + title: str
            + created_at: datetime.datetime {readOnly}
            + updated_at: datetime.datetime {readOnly}
            ' methods --------------------------
            + create(created_by: User, title: str): ShoppingList
            + read_items(): List[ShoppingList_ShoppingListItem]
            + delete(): None
        }
        Class ShoppingListItemCategory {
            ' attributes --------------------------
            + id: int {readOnly}
            + household: Household {readOnly}
            + name: str
            ' methods --------------------------
            + create(household: Household, name: str): ShoppingListItemCategory
            + read_items(): List[ShoppingListItem]
            + delete(): None
        }
        Class ShoppingListItem {
            ' attributes --------------------------
            + id: int {readOnly}
            + household: Household {readOnly}
            + category: ShoppingListItemCategory
            + title: str
            ' methods --------------------------
            + create(household: Household, title: str, category: ShoppingListItemCategory): ShoppingListItem
            + delete(): None
        }
        Class ShoppingList_ShoppingListItem {
            ' attributes --------------------------
            + id: int {readOnly}
            + list: ShoppingList
            + item: ShoppingListItem
            + quantity: float
            + unit: str
            + note: str
            + is_done: bool
            ' methods --------------------------
            + create(list: ShoppingList, item: ShoppingListItem, quantity: float, unit: str): ShoppingList_ShoppingListItem
            + delete(): None
        }

        ' Relations inside Domain
        ShoppingList "1" *-- "0..*" ShoppingList_ShoppingListItem : "consists of"
        ShoppingList_ShoppingListItem "0..*" -- "1" ShoppingListItem : "has a"
        ShoppingListItem "0..*" -- "1" ShoppingListItemCategory : "categorized by"
    }

    '--------------------------------
    ' Relations inside Models Domain (Cross-Sub-Domains)
    '--------------------------------
    User "0..*" ---* "1" Household : "belongs to"
    AreaOfResponsibility "0..*" ---* "1" Household : "belongs to"
    CustomListItem "0..*" ---* "1" Household : "belongs to"
    ShoppingListItem "0..*" ---* "1" Household : "belongs to"
    ShoppingListItemCategory "0..*" ---* "1" Household : "belongs to"

    User "1" --- "0..*" Task : "creator"
    User "1" --- "0..*" Task : "assignee"
    User "1" --- "0..*" Task_TaskHelper : "helps"
    User "1" --- "0..*" Project : "creator"
    User "1" --- "0..*" User_Project : "involved"
    User "1" --- "0..*" CustomList : "creator"
    User "1" --- "0..*" ShoppingList : "creator"
    User "1" --- "0..*" AreaOfResponsibility : "assignee"

    CustomList "0..*" --- "0..1" AreaOfResponsibility : "categorized by"
    Task "0..*" --- "0..1" AreaOfResponsibility : "categorized by"
    Project "0..*" --- "0..1" AreaOfResponsibility : "categorized by"
    ShoppingList "0..*" --- "0..1" AreaOfResponsibility : "categorized by"

    CustomList "0..*" ---o "0..1" Project : "belongs to"
    NonRecurringTask "0..*" ---o "0..1" Project : "belongs to"
    ShoppingList "0..*" ---o "0..1" Project : "belongs to"
}

'--------------------------------
' Services MVP only
'--------------------------------
package Services {
    Class HouseholdService {
        + read_household(household_id: int): Household
        ' User story #16:
        + update_name(household_id: int, new_name: str): None
        ' User story #18:
        + invite_member(household_id: int, email: str, role_id: int): None
    }
    Class UserService {
        ' User story #23
        + create_user(household_id: int, email: str, username: str, plain_password: str, role_id: int): User
        ' User story #27, #34, #36, #37:
        + read_user(user_id: int): User
        ' User story #30:
        + read_users_by_household(household_id: int): List[User]
        ' User stories #25, #27:
        + login(username: str, plain_password: str, household_id): bool
        ' User story #26:
        + logout(user_id): None
        ' User stories #25, #27:
        + authenticate_user(username: str, plain_password: str, household_id: int): User
        ' User story #28:
        + reset_user_password(email: str): None
        ' User story #24:
        + update_username(household_id: int, new_username: str): None
        ' User story #27:
        + update_user_email(household_id: int, new_email: str): None
        ' User story #24:
        + update_user_password(user_id: int, current_plain_password: str, new_plain_password: str): None
        ' User story #20:
        + update_user_role(user_id: int, new_role_id: int): None
        + toggle_user_active_status(user_id: int): None
        ' User story #30:
        + filter_users_by_role(users: List[User], role_id: int): List[User]
        ' User story #30:
        + filter_users_by_active_status(users: List[User], is_active: bool): List[User]
        ' User story #30:
        + sort_users_by_name(users: List[User]): List[User]
        ' User story #30:
        + sort_users_by_role(users: List[User]): List[User]
        ' User story #30:
        + sort_users_by_active_status(users: List[User]): List[User]
        ' User story #19:
        + delete_user(user_id: int): None
    }
    Class TaskService {
        ' User story #34, #35:
        + create_task(created_by: User, title: str, is_recurring: bool, description: str): Task
        + read_task(task_id: int): Task
        ' User story #42, #43:
        + read_household_tasks(household_id: int): List[Task]
        ' User story #46:
        + read_all_tasks(): List[Task]
        ' User story #42:
        + sort_tasks_by_assignee(tasks: List[Task]): List[Task]
        ' User story #42, #43:
        + filter_tasks_by_assignee(tasks: List[Task], user_id: int): List[Task]
        ' User story #44:
        + sort_tasks_by_due_date(tasks: List[Task]): List[Task]
        ' User story #44:
        + filter_tasks_by_due_date(tasks: List[Task], from_due_date: datetime.date): List[Task]
        ' User story #46:
        + filter_tasks_by_is_recurring(tasks: List[Task], is_recurring: bool): List[Task]
        ' User story #36:
        + read_task_helpers(task_id: int): List[User]
        ' User story #47:
        + update_task_priority(task_id: int, new_priority_id): None
        ' User story #47:
        + update_task_title(task_id: int, new_title: str): None
        ' User story #47:
        + update_task_description(task_id: int, new_description: str): None
        ' User story #47:
        + update_task_assignee(task_id: int, new_assignee: User): None
        ' User story #37:
        + assign_task_helper(task_id: int, helper: User): None
        ' User story #37:
        + delete_task_helper(task_id: int, helper: User): None
        ' User story #45, #47:
        + update_task_status(task_id: int, new_status_id: int): None
        ' User story #49:
        + delete_task(task_id): None
    }
    Class RecurringTaskService {
        ' User story #38:
        + create_recurring_task(created_by: User, title: str, recurrence_cycle_id: int, recurrence_interval: int, description: str): RecurringTask
        ' User story #46:
        + read_tasks_need_to_auto_status_update(tasks: List[Task]): List[Task]
        ' User story #39, #47:
        + update_task_recurrence_cycle(task_id: int, new_recurrence_cycle_id: int): None
        ' User story #39, #47:
        + update_task_recurrence_interval(task_id: int, new_recurrence_interval: int): None
        ' User story #40:
        + toggle_task_active_status(task_id: int): None
        ' User story #46:
        + update_recurring_tasks_status(tasks: List[Task]): None
        ' User story #47:
        + transform_non_recurring_task_to_recurring_task(task: Task, recurrence_cycle_id: int, recurrence_interval: int): RecurringTask
    }
    Class NonRecurringTaskService {
        ' User story #41:
        + create_non_recurring_task(created_by: User, title: str, deadline: datetime.date, description: str): NonRecurringTask
        ' User story #41, #47:
        + update_task_deadline(task_id: int): None
        ' User story #47:
        + transform_recurring_task_to_non_recurring_task(deadline: datetime.date): None
    }

    ' Post MVP:
    Class AreaOfResponsibilityService {}
    Class ProjectService {}
    Class CustomListService {}
    Class CustomListItemService {}
    Class ShoppingListService {}
    Class ShoppingListItemCategoryService {}
    Class ShoppingListItemService
}

'--------------------------------
' Routes
'--------------------------------
package "Routes (Blueprints)" {
}

@enduml