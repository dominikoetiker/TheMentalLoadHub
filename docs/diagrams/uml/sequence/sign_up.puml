@startuml
actor "New User" as AppUser
participant "Frontend (React)" as FE
participant "/signup route\n (Flask Blueprint)" as SR
participant "/verify route\n (Flask Blueprint)" as VR
participant "UserService" as US
participant "User Model Object \n (SQLAlchemy\n to Database)" as UM
participant "External \n Email Service" as Mail

== Sign up Process ==
AppUser -> FE : Navigates to sign up form
activate FE
AppUser <-- FE : Sign up form
AppUser -> FE : Fills sign up form {email, plain_password} and submits
FE -> SR : HTTP Request: POST {email, plain_password}
deactivate FE
activate SR
SR -> US : is_email_format_valid(email)
activate US
alt Email format not valid
    SR <-- US : False
    FE <-- SR : HTTP Response: 400 Bad Request (Email format not valid)
    activate FE
    AppUser <-- FE : Error: Email format not valid, try again
    deactivate FE
end
SR <-- US : True
deactivate US
SR -> US : query_users_by_mail(email)
activate US
alt Account already exists
    SR <-- US : User (object)
    FE <-- SR : HTTP Response: 409 Conflict (User exists)
    activate FE
    AppUser <-- FE : Error: account already exists, redirects to login page
    deactivate FE
end
SR <-- US : None
deactivate US
SR -> US : create_user(email, plain_password)
activate US
US -> US : __create_verification_token()
activate US
deactivate US
US -> UM : new(unverified_email, plain_password, plain_verification_token)
activate UM
UM -> UM : __hash_secret(password)
activate UM
deactivate UM
UM -> UM : __hash_secret(plain_verification_token)
activate UM
deactivate UM
UM -> UM : verification_exp_at = (now + 48h)
activate UM
deactivate UM
US <-- UM : User (object)
deactivate UM
US -> US : __create_verification_link(plain_verification_token, unverified_email)
activate US
deactivate US
US -> US : __send_verification_mail(verification_link)
activate US
US -> Mail : send email {verification_link, email}
activate Mail
deactivate US
SR <-- US : User (object)
deactivate US
FE <-- SR : HTTP Response: 201 Created (User created)
deactivate SR
activate FE
AppUser <-- FE : Success Message and "check your mail"
deactivate FE
AppUser <- Mail : Mail with link
deactivate Mail

newpage
== E-Mail Verification ==
AppUser -> FE : clicks link (send email and token)
activate FE
FE -> VR : HTTP Request: GET {email, plain_verification_token}
deactivate FE
activate VR
VR -> US : is_email_format_valid(email)
activate US
alt Email format not valid
    VR <-- US : False
    FE <-- VR : HTTP Response: 404 Not Found
    activate FE
    AppUser <-- FE : Error: link not valid
    deactivate FE
end
VR <-- US : True
deactivate US
VR -> US : query_users_by_unverified_mail_and_not_expired_verification(unverified_email: str)
activate US
alt Unverified Mail does not exist or expired
    VR <-- US : None
    FE <-- VR : HTTP Response: 404 Not Found
    activate FE
    AppUser <-- FE : Error: link not valid
    deactivate FE
end
VR <-- US : User object
deactivate US
VR -> US : verify_email(User, plain_verification_token)
activate US
US -> UM : verify_verification_token(plain_verification_token)
activate UM
UM -> UM : __hash_secret(plain_verification_token)
activate UM
deactivate UM
alt verification token does not match
    US <-- UM : False
    VR <-- US : False
    FE <-- VR : HTTP Response: 404 Not Found
    activate FE
    AppUser <-- FE : Error: link not valid
    deactivate FE
end
US <-- UM : True
US -> UM : is_user_verified = True
US -> UM : email = unverified_email
US -> UM : unverified_email = ""
deactivate UM
VR <-- US : True
deactivate US
FE <-- VR : HTTP Response: 200 OK (Email verified)
deactivate VR
activate FE
AppUser <-- FE : Success Message and redirects to login page
deactivate FE
@enduml