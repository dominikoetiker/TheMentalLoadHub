@startuml

skinparam BoxPadding 20

actor Administrator as Admin
actor "New User" as User

box Frontend
participant "Frontend (React)" as FE
endbox

box Backend
participant "/invitations route\n (Flask Blueprint)" as IR
participant "/register route\n (Flask Blueprint)" as RR
participant "/users route\n (Flask Blueprint)" as UR

participant "InvitationService" as IS
participant "UserService" as US

participant "Invitation Model Object \n (SQLAlchemy\n to Database)" as IM
participant "User Model Object \n (SQLAlchemy\n to Database)" as UM
endbox

box External Service
participant "Email Service" as Mail
endbox

== Invitation Process (Admin) ==

Admin -[#red]> FE : Initiates invitation
    activate FE
    FE -[#red]> IR : HTTP Request: POST /invitations {email, role_id}
        activate IR
        IR -[#red]> IR : extracts household_id from Administrator User object (sender of invitation)
        activate IR
        IR -[#red]> IS : invite_member(household_id, email, role_id)
            deactivate IR
            activate IS
            IS -[#red]> IS : __generate_unique_token()
            activate IS
            deactivate IS
            IS -[#red]> IS : __create_invitation(household_id, email, role_id)
            activate IS
            IS -[#red]> IM : create(household, household_role, email, plain_token)
                activate IM
                IM -[#red]> IM : __hash_token(plain_token) (for storage)
                activate IM
                deactivate IM
            IS <-[#blue]- IM : Invitation object
            deactivate IM
            deactivate IS
            IS -[#red]> IS : __generate_invitation_link() [including plain_token]
            activate IS
            deactivate IS
            IS -[#red]> IS : __send_invitation_email(email: str, invitation_link: str)
            activate IS
            IS -[#red]> Mail : calls Mail service to send Email
                activate Mail
                deactivate IS
                deactivate IS
    FE <-[#blue]- IR : HTTP Response: Success
    deactivate IR
Admin <-[#blue]- FE : Displays success
deactivate FE
User <[#red]- Mail : send invitation link to new User
deactivate Mail

== User Registration Process ==

User -[#red]> FE : Clicks invitation link (/register?token=...&email=...)
    activate FE
    FE -[#red]> RR : HTTP Request: GET /register?token=<token>&email=<email>
        activate RR
        RR -[#red]> IS : verify_invitation(plain_token, email)
            activate IS
            IS -[#red]> IM : query invitation by email, is_used=false, created_after expiration time period before current time
                activate IM

alt invitation does not exist
            IS <-[#blue]- IM : null
        RR <-[#blue]- IS : null
    FE <-[#blue]- RR : HTTP Response: Error
User <-[#blue]- FE : Error Message: Invitation not valid

else Invitation does exist
            IS <-[#blue]- IM : Invitation object
            deactivate IM
            IS -[#red]> IM : verify_token(plain_token)
                activate IM
                IM -[#red]> IM : __hash_token(plain_token)
                activate IM
                deactivate IM

alt invitation token not verified
            IS <-[#blue]- IM : False
        RR <-[#blue]- IS : null
    FE <-[#blue]- RR : HTTP Response: Error
User <-[#blue]- FE : Error Message: Invitation not valid

else invitation token verified
            IS <-[#blue]- IM : True
            deactivate IM
        RR <-[#blue]- IS : Invitation object
        deactivate IS
    FE <-[#blue]- RR : HTTP Response: Registration data (email, household_id, role_id) / Error
    deactivate RR
User <-[#blue]- FE : Registration form (username, password) (prefilled and immutable: email, household_id and role_id)
deactivate FE

end
end

User -[#red]> FE : Fills out registration form (username, password)
    activate FE
    FE -[#red]> UR : HTTP Request: POST /users {username, password, email, household_id, role_id, token}
        activate UR
        UR -[#red]> IS: verify_invitation(plain_token, email) check if token is still valid
            activate IS
            IS -[#red]> IM : query invitation by email, is_used=false, created_after expiration time period before current time
                activate IM

alt invitation does not exist
            IS <-[#blue]- IM : null
        UR <-[#blue]- IS : null
    FE <-[#blue]- UR : HTTP Response: Error
User <-[#blue]- FE : Error Message: Invitation not valid

else Invitation does exist
            IS <-[#blue]- IM : Invitation object
            deactivate IM
            IS -[#red]> IM : verify_token(plain_token)
                activate IM
                IM -[#red]> IM : __hash_token(plain_token)
                activate IM
                deactivate IM

alt invitation token not verified
            IS <-[#blue]- IM : False
        UR <-[#blue]- IS : null
    FE <-[#blue]- UR : HTTP Response: Error
User <-[#blue]- FE : Error Message: Invitation not valid

else invitation token verified
            IS <-[#blue]- IM : True
            deactivate IM
        UR <-[#blue]- IS : Invitation object (or null)
        deactivate IS
        UR -[#red]> US : create_user(invitation, username, plain_password)
            activate US
            US -[#red]> UM : create(household, email, username, plain_password)
                activate UM
                UM -[#red]> UM : Hash password
                activate UM
                deactivate UM
            US <-[#blue]- UM : User object
            deactivate UM
        UR <-[#blue]- US : User object
        deactivate US
        UR -[#red]> IS : mark_invitation_as_used(invitation_id)
            activate IS
            IS -[#red]> IM : query invitation by id
                activate IM
            IS <-[#blue]- IM : Invitation object
            deactivate IM
            IS -[#red]> IM : mark_as_used()
                activate IM
            deactivate IM
        deactivate IS
    FE <-[#blue]- UR : HTTP Response: Success/Redirection to login / Error
    deactivate UR
User <[#red]- FE : Redirects to login
deactivate FE

end
end

@enduml