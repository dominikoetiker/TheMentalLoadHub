@startuml

skinparam BoxPadding 20

' Actors
actor "User" as User

box Frontend
participant "Frontend (React)" as FE
endbox

box Backend
' Login Process Route
participant "/login route\n (Flask Blueprint)" as LIR
' Change Credentials Route
participant "/credentials route\n (Flask Blueprint)" as CR
' Logout Process Route
participant "/logout route\n (Flask Blueprint)" as LOR

' Services
participant "UserService" as US

' Models
participant "User Model Object\n (SQLAlchemy\n to Database)" as UM
endbox

== Login Process ==
User -[#red]> FE : Opens Login page and submits form\n(username, plain_password, household_id)
activate FE
FE -[#red]> LIR : HTTP Request: POST /login {username, plain_password, household_id}
activate LIR
LIR -[#red]> US : login(username, plain_password, household_id)
activate US
US -[#red]> UM : query user by username, household_id
activate UM
alt User not found
    US <-[#blue]- UM : null
    LIR <-[#blue]- US : False
    FE <-[#blue]- LIR : HTTP Response: Error (Invalid credentials)
    User <-[#blue]- FE : Display error "Invalid credentials"
else User found
    US <-[#blue]- UM : User object
    deactivate UM
    US -[#red]> US : authenticate_user(plain_password)
    activate US
    US -[#red]> UM : verify_password(plain_password)
    activate UM
    UM -[#red]> UM : __hash_password(plain_password)
    activate UM
    deactivate UM
    alt Password mismatch
        US <-[#blue]- UM : False
        LIR <-[#blue]- US : False
        FE <-[#blue]- LIR : HTTP Response: Error (Invalid credentials)
        User <-[#blue]- FE : Display error "Invalid credentials"
    else Password match
        US <-[#blue]- UM : True
        deactivate UM
        deactivate US
        LIR <-[#blue]- US : User object + session token
        deactivate US
        FE <-[#blue]- LIR : HTTP Response: Success (User data, session token)
        deactivate LIR
        User <-[#blue]- FE : Redirect to dashboard/home
        deactivate FE
    end
end

== Change Credentials Process ==
User -[#red]> FE : Navigates to Account Settings\nand fills change credentials form\n(current password, new username, new password)
activate FE
FE -[#red]> CR : HTTP Request: PUT /credentials {current_password, new_username, new_password}
activate CR
CR -[#red]> US : update_credentials(user_id, current_password,\nnew_username, new_password)
activate US
US -[#red]> UM : query user by id
activate UM
UM -[#red]> UM : fetch user record
deactivate UM
US <-[#blue]- UM : User object
deactivate UM
US -[#red]> UM : verify_current_password(current_password)
activate UM
UM -[#red]> UM : __hash_password(current_password) for comparison
activate UM
deactivate UM
alt Current password incorrect
    UM <-[#blue]- UM : False
    deactivate UM
    US <-[#blue]- UM : False
    deactivate US
    CR <-[#blue]- US : Error: Current password incorrect
    deactivate CR
    FE <-[#blue]- CR : HTTP Response: Error (Current password incorrect)
    deactivate FE
    User <-[#blue]- FE : Display error "Current password incorrect"
else Current password correct
    UM <-[#blue]- UM : True
    deactivate UM
    US <-[#blue]- UM : True
    US -[#red]> UM : update username and new password\n(__hash_password(new_password))
    activate UM
    UM -[#red]> UM : update record in database
    activate UM
    deactivate UM
    US <-[#blue]- UM : Updated User object
    deactivate US
    CR <-[#blue]- US : Success (Updated User object)
    deactivate CR
    FE <-[#blue]- CR : HTTP Response: Success (Credentials updated)
    deactivate FE
    User <-[#blue]- FE : Display success "Credentials updated"
end

== Logout Process ==
User -[#red]> FE : Clicks Logout
activate FE
FE -[#red]> LOR : HTTP Request: POST /logout
activate LOR
LOR -[#red]> US : logout_user(session_token)
activate US
US -[#red]> US : Invalidate session/token\n(clear session cookie)
deactivate US
US <-[#blue]- US : Confirmation of logout
deactivate US
LOR <-[#blue]- US : Success
deactivate LOR
FE <-[#blue]- LOR : HTTP Response: Success (Logged out)
deactivate FE
User <-[#blue]- FE : Redirect to login page

@enduml