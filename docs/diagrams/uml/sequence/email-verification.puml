@startuml
actor "User" as AppUser
participant "Frontend (React)" as FE
participant "/verify route\n (Flask Blueprint)" as VR
participant "UserService" as US
participant "EmailVerificationService" as ES
participant "User Model Object \n (SQLAlchemy\n to Database)" as UM

== E-Mail Verification ==
AppUser -> FE : clicks link (send email and token)
activate FE
FE -> VR : HTTP Request: GET {email, plain_verification_token}
deactivate FE
activate VR
VR -> ES : is_email_format_valid(email)
activate ES
alt Email format not valid
    VR <-- ES : False
    FE <-- VR : HTTP Response: 404 Not Found
    activate FE
    AppUser <-- FE : Error: link not valid
    deactivate FE
end
VR <-- ES : True
deactivate ES
VR -> US : query_users_by_unverified_mail_and_not_expired_verification(unverified_email: str)
activate US
alt Unverified Mail does not exist or expired
    VR <-- US : None
    FE <-- VR : HTTP Response: 404 Not Found
    activate FE
    AppUser <-- FE : Error: link not valid
    deactivate FE
end
VR <-- US : User object
deactivate US
VR -> ES : verify_email(User, plain_verification_token)
activate ES
ES -> UM : verify_verification_token(plain_verification_token)
activate UM
UM -> UM : __hash_secret(plain_verification_token)
activate UM
deactivate UM
alt verification token does not match
    ES <-- UM : False
    VR <-- ES : False
    FE <-- VR : HTTP Response: 404 Not Found
    activate FE
    AppUser <-- FE : Error: link not valid
    deactivate FE
end
ES <-- UM : True
ES -> UM : is_user_verified = True
ES -> UM : email = unverified_email
ES -> UM : unverified_email = ""
deactivate UM
VR <-- ES : True
deactivate ES
FE <-- VR : HTTP Response: 200 OK (Email verified)
deactivate VR
activate FE
AppUser <-- FE : Success Message and redirects to login page
deactivate FE
@enduml
